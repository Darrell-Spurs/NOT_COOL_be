{
  "openapi": "3.0.0",
  "info": {
    "title": "NOT_COOL API",
    "version": "1.0.0",
    "description": "API documentation for the NOT_COOL backend"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local dev server"
    }
  ],
  "paths": {
    "/tokens/push": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Register push token and send test notification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Expo push notification token"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test notification sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing push token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to send push notification"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/test": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send test notification manually",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Expo push notification token"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test notification sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "result": {
                      "type": "object",
                      "description": "Response from Expo push service",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string",
                                "example": "ok"
                              },
                              "id": {
                                "type": "string",
                                "example": "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing push token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing push token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - failed to send notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to send push notification"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/due": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send a due-task notification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Expo push notification token"
                  },
                  "until_due": {
                    "type": "integer",
                    "description": "Time until due in seconds",
                    "example": 3600
                  },
                  "task_name": {
                    "type": "string",
                    "description": "Name of the task that is due",
                    "example": "Complete project report"
                  }
                },
                "required": [
                  "token",
                  "until_due",
                  "task_name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Due task notification sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "result": {
                      "type": "object",
                      "description": "Response from Expo push service"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing push token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - failed to send notification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to send push notification <due-notification>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "UserName": {
                    "type": "string",
                    "description": "Username for the new user",
                    "example": "john_doe"
                  },
                  "Password": {
                    "type": "string",
                    "description": "Password for the new user",
                    "example": "j0hNn_dO3"
                  }
                },
                "required": [
                  "UserName",
                  "Password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "UserID": {
                      "type": "string",
                      "description": "Auto-generated unique user ID",
                      "example": "user_123456789"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing UserName",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "UserName is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's information",
        "description": "Updates only the Arrange or UserName fields for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Arrange": {
                    "type": "integer",
                    "example": 1
                  },
                  "UserName": {
                    "type": "string",
                    "example": "Alice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Invalid or missing fields"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Authenticate user",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "UserID",
                  "Password"
                ],
                "properties": {
                  "UserID": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a new task",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "UserID": {
                    "type": "string",
                    "description": "ID of the user creating the task",
                    "example": "user_123456789"
                  },
                  "TaskName": {
                    "type": "string",
                    "description": "Name of the task",
                    "example": "Complete project report"
                  },
                  "TaskDetail": {
                    "type": "string",
                    "description": "Detailed description of the task",
                    "example": "Write a comprehensive report on the project findings"
                  },
                  "EndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Due date and time for the task",
                    "example": "2024-02-15T23:59:59.000Z"
                  },
                  "Parent": {
                    "type": "string",
                    "description": "Parent task ID (default \"NULL\")",
                    "example": "task_parent123"
                  },
                  "Penalty": {
                    "type": "number",
                    "description": "Penalty score for late completion (default 0)",
                    "example": 10
                  },
                  "ExpectedTime": {
                    "type": "number",
                    "description": "Expected time to complete in minutes (default 60)",
                    "example": 120
                  }
                },
                "required": [
                  "UserID",
                  "TaskName",
                  "TaskDetail",
                  "EndTime"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "TaskID": {
                      "type": "string",
                      "description": "Auto-generated unique task ID",
                      "example": "task_123456789"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "All fields are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database connection failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskID}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task by its ID",
        "description": "Retrieve the full task object by its TaskID",
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "task": {
                      "type": "object",
                      "description": "The full task object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Task not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Edit a task's allowed fields",
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the task to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "TaskName": {
                    "type": "string"
                  },
                  "TaskDetail": {
                    "type": "string"
                  },
                  "EndTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ExpectedTime": {
                    "type": "number"
                  },
                  "Penalty": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully"
          },
          "400": {
            "description": "Invalid fields in request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/by-username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user ID by username",
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Username to search for",
            "example": "john_doe"
          }
        ],
        "responses": {
          "200": {
            "description": "UserID found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "UserID": {
                      "type": "string",
                      "description": "The user's unique ID",
                      "example": "user_123456789"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User john_doe Not Found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database query failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/arrange": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Arrange value of a user",
        "description": "Retrieve the Arrange field from the user document in Firestore.",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to query"
          }
        ],
        "responses": {
          "200": {
            "description": "User arrange value fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "userID": {
                      "type": "string"
                    },
                    "arrange": {
                      "type": "integer",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/{userID}/tasks/root": {
      "get": {
        "tags": [
          "Users",
          "Tasks"
        ],
        "summary": "Get root tasks for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's unique ID",
            "example": "user_123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "List of root tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "TaskID": {
                            "type": "string",
                            "example": "task_123456789"
                          },
                          "UserID": {
                            "type": "string",
                            "example": "user_123456789"
                          },
                          "TaskName": {
                            "type": "string",
                            "example": "Complete project"
                          },
                          "TaskDetail": {
                            "type": "string",
                            "example": "Finish the final project for CS course"
                          },
                          "CreatedTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-15T10:30:00.000Z"
                          },
                          "EndTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-02-15T23:59:59.000Z"
                          },
                          "State": {
                            "type": "string",
                            "example": "On"
                          },
                          "Member": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "user_123456789",
                              "user_987654321"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database query failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/tasks/leaf": {
      "get": {
        "tags": [
          "Users",
          "Tasks"
        ],
        "summary": "Get leaf tasks for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's unique ID",
            "example": "user_123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "List of leaf tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "TaskID": {
                            "type": "string",
                            "example": "task_123456789"
                          },
                          "UserID": {
                            "type": "string",
                            "example": "user_123456789"
                          },
                          "TaskName": {
                            "type": "string",
                            "example": "Write introduction"
                          },
                          "TaskDetail": {
                            "type": "string",
                            "example": "Write the introduction section of the report"
                          },
                          "CreatedTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-15T10:30:00.000Z"
                          },
                          "EndTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-02-15T23:59:59.000Z"
                          },
                          "State": {
                            "type": "string",
                            "example": "On"
                          },
                          "Member": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "user_123456789"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database query failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/tasks/finished-root": {
      "get": {
        "tags": [
          "Users",
          "Tasks"
        ],
        "summary": "Get finished root tasks for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's unique ID",
            "example": "user_123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "List of finished root tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "TaskID": {
                            "type": "string",
                            "example": "task_123456789"
                          },
                          "UserID": {
                            "type": "string",
                            "example": "user_123456789"
                          },
                          "TaskName": {
                            "type": "string",
                            "example": "Completed project"
                          },
                          "TaskDetail": {
                            "type": "string",
                            "example": "Successfully completed final project"
                          },
                          "CreatedTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-15T10:30:00.000Z"
                          },
                          "EndTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-02-15T23:59:59.000Z"
                          },
                          "State": {
                            "type": "string",
                            "example": "On"
                          },
                          "Member": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "user_123456789",
                              "user_987654321"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database query failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/tasks/finished-leaf": {
      "get": {
        "tags": [
          "Users",
          "Tasks"
        ],
        "summary": "Get finished leaf tasks for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's unique ID",
            "example": "user_123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "List of finished leaf tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "TaskID": {
                            "type": "string",
                            "example": "task_123456789"
                          },
                          "UserID": {
                            "type": "string",
                            "example": "user_123456789"
                          },
                          "TaskName": {
                            "type": "string",
                            "example": "Completed introduction"
                          },
                          "TaskDetail": {
                            "type": "string",
                            "example": "Successfully wrote introduction section"
                          },
                          "CreatedTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-15T10:30:00.000Z"
                          },
                          "EndTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-02-15T23:59:59.000Z"
                          },
                          "State": {
                            "type": "string",
                            "example": "On"
                          },
                          "Member": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "user_123456789"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database query failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meetings": {
      "post": {
        "tags": [
          "Meetings"
        ],
        "summary": "Create a new meeting",
        "description": "Adds a new meeting with the specified name, details, duration, and start time.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "MeetingName",
                  "Duration",
                  "StartTime",
                  "TaskID"
                ],
                "properties": {
                  "TaskID": {
                    "type": "string",
                    "example": "Task_123456789"
                  },
                  "MeetingName": {
                    "type": "string",
                    "example": "Project Sync"
                  },
                  "MeetingDetail": {
                    "type": "string",
                    "example": "Weekly sync-up with the development team"
                  },
                  "Duration": {
                    "type": "number",
                    "example": 60
                  },
                  "StartTime": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-06-01T10:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Meeting created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Meeting created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/meetings/{MeetingID}": {
      "delete": {
        "tags": [
          "Meetings"
        ],
        "summary": "Delete a meeting",
        "parameters": [
          {
            "in": "path",
            "name": "MeetingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting deleted successfully"
          }
        }
      }
    },
    "/users/{userID}/meetings": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "Get meetings for a user",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "User's unique ID",
            "example": "user_123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "List of meetings retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "meetings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "TaskID": {
                            "type": "string",
                            "example": "task_123456789"
                          },
                          "MeetingID": {
                            "type": "string",
                            "example": "meeting_123456789"
                          },
                          "MeetingName": {
                            "type": "string",
                            "example": "Project kickoff meeting"
                          },
                          "MeetingDetail": {
                            "type": "string",
                            "example": "Initial meeting to discuss project requirements"
                          },
                          "StartTime": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-20T14:00:00.000Z"
                          },
                          "Duration": {
                            "type": "number",
                            "description": "Duration in minutes",
                            "example": 60
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database query failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meetings/{meetingID}": {
      "get": {
        "tags": [
          "Meetings"
        ],
        "summary": "Get a meeting by MeetingID",
        "description": "Fetch a specific meeting document using its MeetingID.",
        "parameters": [
          {
            "in": "path",
            "name": "meetingID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the meeting to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "meeting": {
                      "type": "object",
                      "properties": {
                        "MeetingID": {
                          "type": "string"
                        },
                        "MeetingName": {
                          "type": "string"
                        },
                        "MeetingDetail": {
                          "type": "string"
                        },
                        "StartTime": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "Duration": {
                          "type": "integer"
                        },
                        "TaskID": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Meeting not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Edit meeting by ID",
        "tags": [
          "Meetings"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "meetingID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Fields to update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meeting updated"
          },
          "404": {
            "description": "Meeting not found"
          }
        }
      }
    },
    "/tasks/{taskID}/finish": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Mark task and its children as finished for a user",
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID to mark as finished",
            "example": "task_123456789"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "TaskID": {
                    "type": "string",
                    "description": "Task ID to mark as finished",
                    "example": "task_123456789"
                  },
                  "UserID": {
                    "type": "string",
                    "description": "User ID who completed the task",
                    "example": "user_123456789"
                  }
                },
                "required": [
                  "TaskID",
                  "UserID"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task marked as finished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "user_123456789 marked as finished in task_123456789 and its children"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "TaskID and UserID are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database update failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskID}/unfinish": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Mark task and its children as unfinished for a user",
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID to mark as unfinished",
            "example": "task_123456789"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "TaskID": {
                    "type": "string",
                    "description": "Task ID to mark as unfinished",
                    "example": "task_123456789"
                  },
                  "UserID": {
                    "type": "string",
                    "description": "User ID who uncompleted the task",
                    "example": "user_123456789"
                  }
                },
                "required": [
                  "TaskID",
                  "UserID"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task marked as unfinished successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "user_123456789 marked as unfinished in task_123456789 and its children"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "TaskID and UserID are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database update failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskID}/delete": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task and its children",
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID to delete",
            "example": "task_123456789"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "TaskID": {
                    "type": "string",
                    "description": "Task ID to delete",
                    "example": "task_123456789"
                  }
                },
                "required": [
                  "TaskID"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task marked as deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Deleted task_123456789 and its children"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing TaskID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "TaskID and UserID are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database update failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskID}/members": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Add user to a task and its ancestors",
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Task ID to add user to",
            "example": "task_123456789"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "UserID": {
                    "type": "string",
                    "description": "User ID to add to the task",
                    "example": "user_123456789"
                  }
                },
                "required": [
                  "UserID"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User added to task and ancestors successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "User user_123456789 added to Task task_123456789 and all ancestors."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "UserID and TaskID are required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Database update failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userID}/schedule": {
      "get": {
        "tags": [
          "Scheduling"
        ],
        "summary": "Schedule a user's tasks",
        "description": "Retrieves all leaf tasks assigned to a user and computes a task schedule using a selected algorithm.\nAlgorithm options:\n  - 1: GA (J sorting)\n  - 2: GA and Random (P sorting)\n  - 3: Earliest Deadline First\n  - 4: Highest Penalty First\n  - 5: Shortest Expected Time First\n",
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user whose tasks should be scheduled"
          },
          {
            "in": "query",
            "name": "alg",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ],
              "default": 1
            },
            "description": "Algorithm ID to use for scheduling"
          }
        ],
        "responses": {
          "200": {
            "description": "Computed schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "result": {
                      "type": "array",
                      "description": "Schedule result from Python script",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "task A",
                        "task B",
                        "task C"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch leaf tasks"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedule/compute": {
      "post": {
        "tags": [
          "Scheduling"
        ],
        "summary": "Run external Python-based scheduler",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "expectedTime": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Array of expected times for tasks in seconds",
                    "example": [
                      120,
                      60,
                      180
                    ]
                  },
                  "penalty": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Array of penalty scores for tasks",
                    "example": [
                      10,
                      5,
                      15
                    ]
                  },
                  "endTimes": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    },
                    "description": "Array of time until due in seconds",
                    "example": [
                      86400,
                      172800,
                      259200
                    ]
                  },
                  "taskIDs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of task IDs",
                    "example": [
                      "Task A",
                      "Task B",
                      "Task C"
                    ]
                  },
                  "alg": {
                    "type": "integer",
                    "description": "Algorithm ID (e.g., 1 for GA, 2 for GA and Random, etc.)",
                    "example": 1
                  }
                },
                "required": [
                  "expectedTime",
                  "penalty",
                  "endTimes",
                  "taskNames",
                  "alg"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Computed schedule from Python",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "Schedule result from Python script"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Missing required fields"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid output from Python script"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {},
  "tags": []
}
